#pragma once

#include "velox/connectors/Connector.h"
#include "velox/exec/tests/utils/PlanBuilder.h"
#include "BossConnectorSplit.h"
#include <iostream>

using namespace facebook::velox;
using namespace facebook::velox::connector;
using namespace facebook::velox::memory;
using namespace facebook::velox::exec::test;

namespace boss::engines::velox {

// TPC-H column handle only needs the column name (all columns are generated in
// the same way).
class BossColumnHandle : public ColumnHandle {
 public:
  explicit BossColumnHandle(const std::string& name) : name_(name) {}

  const std::string& name() const {
    return name_;
  }

 private:
  const std::string name_;
};

// TPC-H table handle uses the underlying enum to describe the target table.
class BossTableHandle : public ConnectorTableHandle {
 public:
  explicit BossTableHandle(
      std::string connectorId,
      std::string tableName,
      const RowTypePtr bossTableSchema,
      std::vector<RowVectorPtr> rowDataVec,
      std::vector<size_t> bossSpanRowCountVec)
      : ConnectorTableHandle(std::move(connectorId)),
        tableName_(tableName),
        tableSchema_(bossTableSchema),
        rowDataVec_(std::move(rowDataVec)),
        spanRowCountVec_(std::move(bossSpanRowCountVec)) {}

  ~BossTableHandle() override {}

  std::string toString() const override;

  std::string getTable() const {
    return tableName_;
  }

  RowTypePtr getTableSchema() const {
    return tableSchema_;
  }

  std::vector<RowVectorPtr> getRowDataVec() const {
    return std::move(rowDataVec_);
  }

  std::vector<size_t> getSpanRowCountVec() const {
    return std::move(spanRowCountVec_);
  }

 private:
  std::string tableName_;
  RowTypePtr tableSchema_;
  std::vector<RowVectorPtr> rowDataVec_;
  std::vector<size_t> spanRowCountVec_;
};

class BossDataSource : public DataSource {
 public:
  BossDataSource(
      const std::shared_ptr<const RowType>& outputType,
      const std::shared_ptr<connector::ConnectorTableHandle>& tableHandle,
      const std::unordered_map<
          std::string,
          std::shared_ptr<connector::ColumnHandle>>& columnHandles,
          memory::MemoryPool* FOLLY_NONNULL pool);

  void addSplit(std::shared_ptr<ConnectorSplit> split) override;

  void addDynamicFilter(
      column_index_t /*outputChannel*/,
      const std::shared_ptr<common::Filter>& /*filter*/) override {
    VELOX_NYI("Dynamic filters not supported by BossConnector.");
  }

  std::optional<RowVectorPtr> next(uint64_t size, ContinueFuture& future)
      override;

  uint64_t getCompletedRows() override {
    return completedRows_;
  }

  uint64_t getCompletedBytes() override {
    return completedBytes_;
  }

  std::unordered_map<std::string, RuntimeCounter> runtimeStats() override {
    // TODO: Which stats do we want to expose here?
    return {};
  }

 private:
  RowVectorPtr getBossData(uint64_t length);

  std::string bossTableName_;
  std::vector<RowVectorPtr> bossRowDataVec_;
  std::vector<size_t> bossSpanRowCountVec_;
  RowTypePtr outputType_;

  // Mapping between output columns and their indices (column_index_t) in the datasets.
  std::vector<column_index_t> outputColumnMappings_;

  std::shared_ptr<BossConnectorSplit> currentSplit_;

  // First (splitOffset_) and last (splitEnd_) row number that should be
  // generated by this split.
  uint64_t splitOffset_{0};
  uint64_t splitEnd_{0};
  size_t spanCountIdx_{0};
  bool firstAddSplit_{false};
  size_t totalParts_{0};
  size_t subParts_{0};
  uint64_t partSize_{0};

  size_t completedRows_{0};
  size_t completedBytes_{0};

  memory::MemoryPool* FOLLY_NONNULL pool_;
};

class BossConnector final : public Connector {
 public:
  BossConnector(
      const std::string& id,
      std::shared_ptr<const Config> properties,
      folly::Executor* FOLLY_NULLABLE /*executor*/)
      : Connector(id) {}

  std::unique_ptr<DataSource>
  createDataSource(
      const std::shared_ptr<const RowType>& outputType,
      const std::shared_ptr<connector::ConnectorTableHandle>& tableHandle,
      const std::unordered_map<
          std::string,
          std::shared_ptr<connector::ColumnHandle>>& columnHandles,
      ConnectorQueryCtx* FOLLY_NONNULL connectorQueryCtx) override final {
    return std::make_unique<BossDataSource>(
        outputType,
        tableHandle,
        columnHandles,
        connectorQueryCtx->memoryPool());
  }

  std::unique_ptr<DataSink> createDataSink(
      RowTypePtr /*inputType*/,
      std::shared_ptr<
          ConnectorInsertTableHandle> /*connectorInsertTableHandle*/,
      ConnectorQueryCtx* /*connectorQueryCtx*/,
      CommitStrategy /*commitStrategy*/) override final {
    VELOX_NYI("BossConnector does not support data sink.");
  }
};

class BossConnectorFactory : public ConnectorFactory {
 public:
  static constexpr const char* FOLLY_NONNULL kBossConnectorName{"boss"};

  BossConnectorFactory() : ConnectorFactory(kBossConnectorName) {}

  explicit BossConnectorFactory(const char* FOLLY_NONNULL connectorName)
      : ConnectorFactory(connectorName) {}

  std::shared_ptr<Connector> newConnector(
      const std::string& id,
      std::shared_ptr<const Config> properties,
      folly::Executor* FOLLY_NULLABLE executor = nullptr) override {
    return std::make_shared<BossConnector>(id, properties, executor);
  }
};

} // namespace boss::engines::velox